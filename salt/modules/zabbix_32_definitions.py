# -*- coding: utf-8 -*-
from __future__ import absolute_import
from __future__ import unicode_literals
from salt.ext.six.moves import range


ACTION_OBJECT = {
        'esc_period': {'required': True, 'type': int},
        'eventsource': {'required': True, 'type': int, 'restrict_values': [0, 1, 2, 3]},
        'name': {'required': True, 'type': str},
        'def_longdata': {'type': str},
        'def_shortdata': {'type': str},
        'r_longdata': {'type': str},
        'r_shortdata': {'type': str},
        'status': {'type': int, 'restrict_values': [0, 1]}}
ACTION_OPERATION_COMMAND_OBJECT = {
        'command': {'type': str},
        'type': {'required': True, 'type': int, 'restrict_values': list(range(0, 5))},
        'authtype': {'type': int, 'restrict_values': [0, 1]},
        'execute_on': {'type': int, 'restrict_values': [0, 1]},
        'password': {'type': str},
        'port': {'type': str},
        'privatekey': {'type': str},
        'publickey': {'type': str},
        'scriptid': {'type': str},
        'username': {'type': str}}
ACTION_OPERATION_MESSAGE_OBJECT = {
        'default_msg': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'mediatypeid': {'type': str},
        'message': {'type': str},
        'subject': {'type': str}}
ACTION_OPERATION_CONDITION_OBJECT = {
        'conditiontype': {'required': True, 'type': int, 'restrict_values': [14]},
        'value': {'required': True, 'type': str},
        'operator': {'type': int, 'restrict_values': [0], 'default': 0}}
ACTION_OPERATION_OBJECT = {
        'operationtype': {'required': True, 'type': int, 'restrict_values': list(range(0, 11))},
        'actionid': {'type': str},
        'esc_period': {'type': int, 'default': None},  # Actually the default seems to be None
        'esc_step_from': {'type': int, 'default': None},  # Actually the default seems to be None
        'esc_step_to': {'type': int, 'default': None},  # Actually the default seems to be None
        'evaltype': {'type': int, 'restrict_values': [0, 1, 2], 'default': 0},
        'opcommand': {'type': dict, 'contents': ACTION_OPERATION_COMMAND_OBJECT},
        'opcommand_grp': {'type': list, 'contents': {
                'operationid': {'type': str},
                'groupid': {'type': str}}},
        'opcommand_hst': {'type': list, 'contents': {
                'operationid': {'type': str},
                'hostid': {'type': str}}},
        'opconditions': {'type': list, 'contents': ACTION_OPERATION_CONDITION_OBJECT},
        'opgroup': {'type': list, 'contents': {
                'operationid': {'type': str},
                'groupid': {'type': str}}},
        'opmessage': {'type': dict, 'contents': ACTION_OPERATION_MESSAGE_OBJECT},
        'opmessage_grp': {'type': list, 'contents': {
                'operationid': {'type': str},
                'usrgrpid': {'type': str}}},
        'opmessage_usr': {'type': list, 'contents': {
                'operationid': {'type': str},
                'userid': {'type': str}}},
        'optemplate': {'type': list, 'contents': {
                'operationid': {'type': str},
                'templateid': {'type': str}}},
        'opinventory': {'type': dict, 'contents': {
                'operationid': {'type': str},
                'inventory_mode': {'type': str}}}}
ACTION_RECOVERY_OPERATION_OBJECT = {
        'operationtype': {'required': True, 'type': int, 'restrict_values': [0, 1, 11]},
        'actionid': {'type': str},
        'opcommand': {'type': dict, 'contents': ACTION_OPERATION_COMMAND_OBJECT},
        'opcommand_grp': {'type': list, 'contents': {
                'operationid': {'type': str},
                'groupid': {'type': str}}},
        'opcommand_hst': {'type': list, 'contents': {
                'operationid': {'type': str},
                'hostid': {'type': str}}},
        'opmessage': {'type': dict, 'contents': ACTION_OPERATION_MESSAGE_OBJECT},
        'opmessage_grp': {'type': list, 'contents': {
                'operationid': {'type': str},
                'usrgrpid': {'type': str}}},
        'opmessage_usr': {'type': list, 'contents': {
                'operationid': {'type': str},
                'userid': {'type': str}}}}
ACTION_FILTER_CONDITION_OBJECT = {
        'conditiontype': {'required': True, 'type': int,
                          'restrict_values': list(range(0, 5)) + list(range(6, 17)) + list(range(18, 27))},
        'value': {'required': True, 'type': str},
        'value2': {'type': str},
        'formulaid': {'type': str},
        'operator': {'type': int, 'restrict_values': list(range(0, 8))}}
ACTION_FILTER_OBJECT = {
        'conditions': {'required': True, 'type': list, 'contents': ACTION_FILTER_CONDITION_OBJECT},
        'evaltype': {'required': True, 'type': int, 'restrict_values': [0, 1, 2, 3]},
        'formula': {'type': str}}
ALERT_OBJECT = {
        'alertid': {'type': str},
        'actionid': {'type': str},
        'alertttype': {'type': int, 'restrict_values': [0, 1]},
        'clock': {'type': float},
        'error': {'type': str},
        'esc_step': {'type': int},
        'eventid': {'type': str},
        'mediatypeid': {'type': str},
        'message': {'type': str},
        'retries': {'type': int},
        'sendto': {'type': str},
        'status': {'type': int, 'restrict_values': [0, 1, 2]},
        'subject': {'type': str},
        'userid': {'type': str}}
APPLICATION_OBJECT = {
        'hostid': {'required': True, 'type': str},
        'name': {'required': True, 'type': str}}
CORRELATION_OBJECT = {
        'name': {'required': True, 'type': str},
        'description': {'type': str},
        'status': {'type': int, 'restrict_values': [0, 1], 'default': 0}}
CORRELATION_OPERATION_OBJECT = {
        'type': {'required': True, 'type': int, 'restrict_values': [0, 1]}}
CORRELATION_FILTER_CONDITION_OBJECT = {
        'type': {'required': True, 'type': int, 'restrict_values': list(range(0, 6))},
        'tag': {'type': str},
        'groupid': {'type': str},
        'oldtag': {'type': str},
        'newtag': {'type': str},
        'value': {'type': str},
        'formulaid': {'type': str},
        'operator': {'type': int}}
CORRELATION_FILTER_OBJECT = {
        'evaltype': {'required': True, 'type': int, 'restrict_values': [0, 1, 2, 3]},
        'conditions': {'required': True, 'type': list,
                       'contents': CORRELATION_FILTER_CONDITION_OBJECT},
        'formula': {'type': str}}
DISCOVERED_HOST_OBJECT = {
        'dhostid': {'type': str},
        'druleid': {'type': str},
        'lastdown': {'type': float},
        'lastup': {'type': float},
        'status': {'type': int, 'restrict_values': [0, 1]}}
DISCOVERED_SERVICE_OBJECT = {
        'dserviceid': {'type': str},
        'dcheckid': {'type': str},
        'dhostid': {'type': str},
        'dns': {'type': str},
        'ip': {'type': str},
        'key_': {'type': str},
        'lastdown': {'type': float},
        'lastup': {'type': float},
        'port': {'type': int},
        'status': {'type': int, 'restrict_values': [0, 1]},
        'type': {'type': int, 'restrict_values': list(range(0, 16))},
        'value': {'type': str}}
DISCOVERY_CHECK_OBJECT = {
        'druleid': {'type': str},
        'key_': {'type': str},
        'ports': {'type': str},
        'snmp_community': {'type': str},
        'snmpv3_authpassphrase': {'type': str},
        'snmpv3_authprotocol': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'snmpv3_contextname': {'type': str},
        'snmpv3_privpassphrase': {'type': str},
        'snmpv3_privprotocol': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'snmpv3_securitylevel': {'type': str, 'restrict_values': ['0', '1', '2']},
        'snmpv3_securityname': {'type': str},
        'type': {'type': int, 'restrict_values': list(range(0, 16)), 'default': 0},
        'uniq': {'type': int, 'restrict_values': [0, 1], 'default': 0}}
DISCOVERY_RULE_OBJECT = {
        'iprange': {'required': True, 'type': str},
        'name': {'required': True, 'type': str},
        'delay': {'type': int, 'default': 3600},
        'proxy_hostid': {'type': str},
        'status': {'type': int, 'restrict_values': [0, 1], 'default': 0}}
# Events are created by the Zabbix server and cannot be modified via the API
EVENT_OBJECT = {}
GRAPH_OBJECT = {
        'height': {'required': True, 'type': int},
        'name': {'required': True, 'type': str},
        'width': {'required': True, 'type': int},
        'graphtype': {'type': int, 'restrict_values': [0, 1, 2, 3], 'default': 0},
        'percent_left': {'type': float, 'default': 0},
        'percent_right': {'type': float, 'default': 0},
        'show_3d': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'show_legend': {'type': int, 'restrict_values': [0, 1], 'default': 1},
        'show_work_period': {'type': int, 'restrict_values': [0, 1], 'default': 1},
        'yaxismax': {'type': float},
        'yaxismin': {'type': float},
        'ymax_itemid': {'type': str},
        'ymax_type': {'type': int, 'restrict_values': [0, 1, 2], 'default': 0},
        'ymin_itemid': {'type': str},
        'ymin_type': {'type': int, 'restrict_values': [0, 1, 2], 'default': 0}}
GRAPH_ITEM_OBJECT = {
        'color': {'required': True, 'type': str},
        'itemid': {'required': True, 'type': str},
        'calc_fnc': {'type': int, 'restrict_values': [1, 2, 4, 7, 9], 'default': 2},
        'drawtype': {'type': int, 'restrict_values': list(range(0, 6)), 'default': 0},
        'graphid': {'type': str},
        'sortorder': {'type': int},
        'type': {'type': int, 'restrict_values': [0, 2], 'default': 0},
        'yaxisside': {'type': int, 'restrict_values': [0, 1], 'default': 0}}
GRAPH_PROTOTYPE_OBJECT = GRAPH_OBJECT
# History objects differ depending on the item's type of information. They are created
# by the Zabbix server and cannot be modified via the API
FLOAT_HISTORY_OBJECT = {}
INTEGER_HISTORY_OBJECT = {}
STRING_HISTORY_OBJECT = {}
TEXT_HISTORY_OBJECT = {}
LOG_HISTORY_OBJECT = {}
HOST_OBJECT = {
        'host': {'required': True, 'type': str},
        'description': {'type': str},
        # Host inventory_mode default is None, even though the API doc says 0
        'inventory_mode': {'type': int, 'default': None,
                           'restrict_values': list(range(-1, 2))},
        # Host ipmi_authtype default is 0, even though the API doc says -1
        'ipmi_authtype': {'type': int, 'default': 0,
                          'restrict_values': list(range(-1, 7))},
        'ipmi_password': {'type': str},
        'ipmi_privilege': {'type': int, 'default': 2,
                           'restrict_values': list(range(1, 6))},
        'ipmi_username': {'type': str},
        'name': {'type': str, 'default': 'host'},
        'proxy_hostid': {'type': str},
        'status': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'tls_issuer': {'type': str},
        'tls_subject': {'type': str},
        'tls_psk_identity': {'type': str},
        'tls_psk': {'type': str}}
HOST_INVENTORY_OBJECT = {}
HOST_GROUP_OBJECT = {'name': {'required': True, 'type': str}}
HOST_INTERFACE_OBJECT = {
        'hostid': {'required': True, 'type': str},
        'dns': {'type': str, 'default': ''},
        'ip': {'type': str, 'default': ''},
        'main': {'required': True, 'type': int,
                 'restrict_values': [0, 1]},
        'port': {'required': True, 'type': str},
        'type': {'required': True, 'type': int,
                 'restrict_values': list(range(1, 5))},
        'useip': {'required': True, 'type': int,
                  'restrict_values': [0, 1]},
        'bulk': {'type': int, 'default': 1, 'restrict_values': [0, 1]}}
HOST_PROTOTYPE_OBJECT = {
        'host': {'required': True, 'type': str},
        'name': {'type': str},
        'status': {'type': int, 'default': 0,
                   'restrict_values': [0, 1]},
        'tls_connect': {'type': int, 'default': 1,
                        'restrict_values': [1, 2, 4]},
        'tls_accept': {'type': int, 'default': 1,
                       'restrict_values': [1, 2, 4]},
        'tls_issuer': {'type': str},
        'tls_subject': {'type': str},
        'tls_psk_identity': {'type': str},
        'tls_psk': {'type': str}}
HOST_PROTOTYPE_INVENTORY_OBJECT = {
        'inventory_mode': {'type': int, 'default': 0,
                           'restrict_values': [-1, 0, 1]}}
GROUP_LINK_OBJECT = {
        'groupid': {'required': True, 'type': str}}
GROUP_PROTOTYPE_OBJECT = {
        'name': {'required': True, 'type': str}}
ICON_MAP_OBJECT = {
        'default_iconid': {'required': True, 'type': str},
        'name': {'required': True, 'type': str}}
ICON_MAPPING_OBJECT = {
        'iconid': {'required': True, 'type': str},
        'expression': {'required': True, 'type': str},
        'inventory_link': {'required': True, 'type': int},
        'sortorder': {'type': int, 'default': 0}}
IMAGE_OBJECT = {
        'name': {'required': True, 'type': str},
        'imagetype': {'type': int, 'default': 1,
                      'restrict_values': [1, 2]}}
ITEM_OBJECT = {
        'delay': {'required': True, 'type': int},
        'hostid': {'required': True, 'type': str},
        'interfaceid': {'type': str},
        'key_': {'required': True, 'type': str},
        'name': {'required': True, 'type': str},
        'type': {'required': True, 'type': int,
                 'restrict_values': list(range(0, 18))},
        'value_type': {'required': True, 'type': int,
                       'restrict_values': list(range(0, 5))},
        'authtype': {'type': int, 'default': 0,
                     'restrict_values': [0, 1]},
        'data_type': {'type': int, 'default': 0,
                      'restrict_values': list(range(0, 4))},
        'delay_flex': {'type': str},
        'delta': {'type': int, 'default': 0,
                  'restrict_values': [0, 1, 2]},
        'description': {'type': str},
        'formula': {'type': (int, float), 'default': 1},
        'history': {'type': int, 'default': 90},
        'inventory_link': {'type': int, 'default': 0},
        'ipmi_sensor': {'type': str},
        'logtimefmt': {'type': str},
        'mtime': {'type': str},
        'multiplier': {'type': int},
        'params': {'type': str},
        'password': {'type': str},
        'port': {'type': str},
        'privatekey': {'type': str},
        'publickey': {'type': str},
        'snmp_community': {'type': str},
        'snmp_oid': {'type': str},
        'snmpv3_authpassphrase': {'type': str},
        'snmpv3_authprotocol': {'type': int, 'default': 0,
                                'restrict_values': [0, 1]},
        'snmpv3_contextname': {'type': str},
        'snmpv3_privpassphrase': {'type': str},
        'snmpv3_privprotocol': {'type': int, 'default': 0,
                                'restrict_values': [0, 1]},
        'snmpv3_securitylevel': {'type': int,
                                 'restrict_values': [0, 1, 2]},
        'snmpv3_securityname': {'type': str},
        'status': {'type': int, 'default': 0, 'restrict_values': [0, 1]},
        'trapper_hosts': {'type': str},
        'trends': {'type': int, 'default': 365},
        'units': {'type': str},
        'username': {'type': str},
        'valuemapid': {'type': str}}
ITEM_PROTOTYPE_OBJECT = {k: v for k, v in ITEM_OBJECT.items() if k not in ['inventory_link', 'mtime']}
IT_SERVICE_OBJECT = {
        'algorithm': {'required': True, 'type': int, 'restrict_values': [0, 1, 2]},
        'name': {'required': True, 'type': str},
        'showsla': {'required': True, 'type': int, 'restrict_values': [0, 1]},
        'sortorder': {'required': True, 'type': int},
        'goodsla': {'type': float, 'default': 99.9},
        'triggerid': {'type': str, 'default': '0'}}
SERVICE_TIME_OBJECT = {
        'serviceid': {'required': True, 'type': str},
        'ts_from': {'required': True, 'type': int},
        'ts_to': {'required': True, 'type': int},
        'type': {'required': True, 'type': int, 'restrict_values': [0, 1, 2]},
        'note': {'type': str}}
SERVICE_DEPENDENCY_OBJECT = {
        'servicedownid': {'required': True, 'type': str},
        'serviceupid': {'required': True, 'type': str},
        'soft': {'required': True, 'type': int, 'restrict_values': [0, 1]}}
# Service alarms cannot be directly created, updated or deleted via the Zabbix API
SERVICE_ALARM_OBJECT = {}
LLD_RULE_OBJECT = {
        'delay': {'required': True, 'type': int},
        'hostid': {'required': True, 'type': str},
        'interfaceid': {'required': True, 'type': str},
        'key_': {'required': True, 'type': str},
        'name': {'required': True, 'type': str},
        'type': {'required': True, 'type': int,
                 'restrict_values': list(range(0, 8)) + [10, 11, 12, 13, 14, 16]},
        'authtype': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'delay_flex': {'type': str},
        'description': {'type': str},
        'ipmi_sensor': {'type': str},
        'lifetime': {'type': int, 'default': 30},
        'params': {'type': str},
        'password': {'type': str},
        'port': {'type': str},
        'privatekey': {'type': str},
        'publickey': {'type': str},
        'snmp_community': {'type': str},
        'snmp_oid': {'type': str},
        'snmpv3_authpassphrase': {'type': str},
        'snmpv3_authprotocol': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'snmpv3_contextname': {'type': str},
        'snmpv3_privpassphrase': {'type': str},
        'snmpv3_privprotocol': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'snmpv3_securitylevel': {'type': int, 'restrict_values': [0, 1, 2]},
        'snmpv3_securityname': {'type': str},
        'status': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'trapper_hosts': {'type': str},
        'username': {'type': str}}
LLD_RULE_FILTER_CONDITION_OBJECT = {
        'macro': {'required': True, 'type': str},
        'value': {'required': True, 'type': str},
        'formulaid': {'type': str},
        'operator': {'type': int, 'default': 8, 'restrict_values': [8]}}
LLD_RULE_FILTER_OBJECT = {
        'conditions': {'required': True, 'type': list, 'contents': LLD_RULE_FILTER_CONDITION_OBJECT},
        'evaltype': {'required': True, 'type': int, 'restrict_values': [0, 1, 2, 3]},
        'formula': {'type': str}}
MAINTENANCE_OBJECT = {
        'name': {'required': True, 'type': str},
        'active_since': {'type': int},
        'active_till': {'type': int},
        'description': {'type': str},
        'maintenance_type': {'type': int, 'default': 0,
                             'restrict_values': [0, 1]}}
TIME_PERIOD_OBJECT = {
        'day': {'type': int},
        'dayofweek': {'type': int},
        'every': {'type': int, 'restrict_values': [1, 2, 3, 4, 5]},
        'month': {'type': int},
        'period': {'type': int, 'default': 3600},
        'start_date': {'type': int},
        'start_time': {'type': int},
        'timeperiod_type': {'type': int, 'default': 0,
                            'restrict_values': [0, 2, 3, 4]}}
MAP_OBJECT = {
        'height': {'required': True, 'type': int},
        'name': {'required': True, 'type': str},
        'width': {'required': True, 'type': int},
        'backgroundid': {'type': str},
        'expand_macros': {'type': int, 'default': 0,
                          'restrict_values': [0, 1]},
        'expandproblem': {'type': int, 'default': 1,
                          'restrict_values': [0, 1]},
        'grid_align': {'type': int, 'default': 1,
                       'restrict_values': [0, 1]},
        'grid_show': {'type': int, 'default': 1,
                      'restrict_values': [0, 1]},
        'grid_size': {'type': int, 'default': 50,
                      'restrict_values': [20, 40, 50, 75, 100]},
        'highlight': {'type': int, 'default': 1,
                      'restrict_values': [0, 1]},
        'iconmapid': {'type': str},
        'label_format': {'type': int, 'default': 0,
                         'restrict_values': [0, 1]},
        'label_location': {'type': int, 'default': 0,
                           'restrict_values': [0, 1, 2, 3]},
        'label_string_host': {'type': str},
        'label_string_hostgroup': {'type': str},
        'label_string_image': {'type': str},
        'label_string_map': {'type': str},
        'label_string_trigger': {'type': str},
        'label_type': {'type': int, 'default': 2,
                       'restrict_values': [0, 1, 2, 3, 4]},
        'label_type_host': {'type': int, 'default': 2,
                            'restrict_values': list(range(0, 6))},
        'label_type_hostgroup': {'type': int, 'default': 2,
                                 'restrict_values': [0, 2, 3, 4, 5]},
        'label_type_image': {'type': int, 'default': 2,
                             'restrict_values': [0, 2, 4, 5]},
        'label_type_map': {'type': int, 'default': 2,
                           'restrict_values': [0, 2, 3, 4, 5]},
        'label_type_trigger': {'type': int, 'default': 2,
                               'restrict_values': [0, 2, 3, 4, 5]},
        'markelements': {'type': int, 'default': 0,
                         'restrict_values': [0, 1]},
        'severity_min': {'type': int},
        'show_unack': {'type': int, 'default': 0,
                       'restrict_values': [0, 1, 2]},
        'userid': {'type': str},
        'private': {'type': int, 'default': 1,
                    'restrict_values': [0, 1]}}
MAP_ELEMENT_URL_OBJECT = {
        'name': {'required': True, 'type': str},
        'url': {'required': True, 'type': str},
        'selementid': {'type': str}}
MAP_ELEMENT_OBJECT = {
        'elementid': {'required': True, 'type': str},
        'elementtype': {'required': True, 'type': int, 'restrict_values': list(range(0, 5))},
        'iconid_off': {'required': True, 'type': str},
        'areatype': {'type': int, 'default': 0,
                     'restrict_values': [0, 1]},
        'application': {'type': str},
        'elementsubtype': {'type': int, 'default': 0,
                           'restrict_values': [0, 1]},
        'height': {'type': int, 'default': 200},
        'iconid_disabled': {'type': str},
        'iconid_maintenance': {'type': str},
        'icnonid_on': {'type': str},
        'label': {'type': str},
        'label_location': {'type': int, 'default': -1,
                           'restrict_values': [-1, 0, 1, 2, 3]},
        'urls': {'type': list, 'contents': MAP_ELEMENT_URL_OBJECT},
        'use_iconmap': {'type': int, 'default': 1,
                        'restrict_values': [0, 1]},
        'viewtype': {'type': int, 'default': 0,
                     'restrict_values': [0]},
        'width': {'type': int, 'default': 200},
        'x': {'type': int, 'default': 0},
        'y': {'type': int, 'default': 0}}
MAP_LINK_TRIGGER_OBJECT = {
        'triggerid': {'required': True, 'type': str},
        'color': {'type': str, 'default': 'DD0000'},
        'drawtype': {'type': int, 'default': 0,
                     'restrict_values': [0, 2, 3, 4]},
        'linkid': {'type': str}}
MAP_LINK_OBJECT = {
        'selementid1': {'required': True, 'type': str},
        'selementid2': {'required': True, 'type': str},
        'color': {'type': str, 'default': '000000'},
        'drawtype': {'type': int, 'default': 0,
                     'restrict_values': [0, 2, 3, 4]},
        'label': {'type': str},
        'linktriggers': {'type': list, 'contents': MAP_LINK_TRIGGER_OBJECT},
        'sysmapid': {'type': str}}
MAP_URL_OBJECT = {
        'name': {'required': True, 'type': str},
        'url': {'required': True, 'type': str},
        'elementtype': {'type': int, 'default': 0},
        'sysmapid': {'type': str}}
MAP_USER_OBJECT = {
        'userid': {'required': True, 'type': str},
        'permission': {'required': True, 'type': int, 'restrict_values': [2, 3]}}
MAP_USER_GROUP_OBJECT = {
        'usrgrpid': {'required': True, 'type': str},
        'permission': {'required': True, 'type': int, 'restrict_values': [2, 3]}}
MEDIA_OBJECT = {
        'active': {'required': True, 'type': int, 'restrict_values': [0, 1]},
        'mediatypeid': {'required': True, 'type': int},
        'period': {'required': True, 'type': str},
        'sendto': {'required': True, 'type': str},
        'severity': {'required': True, 'type': int},
        # Userid is not required in the media object when creating usermedia.
        'userid': {'required': False, 'type': str}}
MEDIA_TYPE_OBJECT = {
        'description': {'required': True, 'type': str},
        'type': {'required': True, 'type': int, 'restrict_values': [0, 1, 2, 3, 100]},
        'exec_path': {'type': str},
        'gsm_modem': {'type': str},
        'passwd': {'type': str},
        'smtp_email': {'type': str},
        'smtp_helo': {'type': str},
        'smtp_server': {'type': str},
        'status': {'type': int, 'default': 0,
                   'restrict_values': [0, 1]},
        'username': {'type': str},
        'exec_params': {'type': str},
        # Undocumented API properties:
        'smtp_authentication': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'smtp_security': {'type': int, 'restrict_values': [0, 1, 2], 'default': 0},
        'smtp_verify_host': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'smtp_verify_peer': {'type': int, 'restrict_values': [0, 1], 'default': 0}}
# problems are created by the Zabbix server and cannot be modified via the API
PROBLEM_OBJECT = {}
PROXY_OBJECT = {
        'host': {'required': True, 'type': str},
        'status': {'required': True, 'type': int, 'restrict_values': [5, 6]},
        'description': {'type': str},
        'tls_connect': {'type': int, 'default': 1,
                        'restrict_values': [1, 2, 4]},
        'tls_accept': {'type': int, 'default': 1,
                       'restrict_values': [1, 2, 4]},
        'tls_issuer': {'type': str},
        'tls_subject': {'type': str},
        'tls_psk_identity': {'type': str},
        'tls_psk': {'type': str}}
# Either DNS or IP is required, but not both.
PROXY_INTERFACE_OBJECT = {
        'dns': {'type': str},
        'ip': {'type': str},
        'port': {'required': True, 'type': str},
        'useip': {'required': True, 'type': int, 'restrict_values': [0, 1]}}
SCREEN_OBJECT = {
        'name': {'required': True, 'type': str},
        'hsize': {'type': int, 'default': 1},
        'vsize': {'type': int, 'default': 1},
        'userid': {'type': str},
        'private': {'type': int, 'default': 1,
                    'restrict_values': [0, 1]}}
SCREEN_USER_OBJECT = {
        'userid': {'required': True, 'type': str},
        'permission': {'required': True, 'type': int, 'restrict_values': [2, 3]}}
SCREEN_USER_GROUP_OBJECT = {
        'usergrpid': {'required': True, 'type': str},
        'permission': {'required': True, 'type': int, 'restrict_values': [2, 3]}}
SCREEN_ITEM_OBJECT = {
        'resourcetype': {'required': True, 'type': int,
                         'restrict_values': list(set(range(0, 21)) - set([17, 18]))},
        'screenid': {'required': True, 'type': str},
        'application': {'type': str},
        'colspan': {'type': int, 'default': 1},
        'dynamic': {'type': int, 'default': 0,
                    'restrict_values': [0, 1]},
        'elements': {'type': int, 'default': 25},
        'halign': {'type': int, 'default': 0,
                   'restrict_values': [0, 1, 2]},
        'height': {'type': int, 'default': 200},
        'max_columns': {'type': int, 'default': 3},
        'resourceid': {'type': str},
        'rowspan': {'type': int, 'default': 1},
        'sort_triggers': {'type': int, 'default': 0,
                          'restrict_values': list(range(0, 13))},
        'style': {'type': int, 'default': 0,
                  'restrict_values': [0, 1, 2]},
        'url': {'type': str},
        'valign': {'type': int, 'default': 0,
                   'restrict_values': [0, 1, 2]},
        'width': {'type': int, 'default': 320},
        'x': {'type': int, 'default': 0},
        'y': {'type': int, 'default': 0}}
SCRIPT_OBJECT = {
        'command': {'required': True, 'type': str},
        'name': {'required': True, 'type': str},
        'confirmation': {'type': str},
        'description': {'type': str},
        'execute_on': {'type': int, 'default': 1,
                       'restrict_values': [0, 1]},
        'groupid': {'type': str, 'default': '0'},
        'host_access': {'type': int, 'default': 2,
                        'restrict_values': [2, 3]},
        'type': {'type': int, 'default': 0,
                 'restrict_values': [0, 1]},
        'usrgrpid': {'type': str, 'default': '0'}}
TEMPLATE_OBJECT = {
        'host': {'required': True, 'type': str},
        'description': {'type': str},
        'name': {'type': str}}
TEMPLATE_SCREEN_OBJECT = {
        'name': {'required': True, 'type': str},
        'templateid': {'required': True, 'type': str},
        'hsize': {'type': int, 'default': 1},
        'vsize': {'type': int, 'default': 1}}
TEMPLATE_SCREEN_ITEM_OBJECT = {
        'resourceid': {'required': True, 'type': str},
        'resourcetype': {'required': True, 'type': int,
                         'restrict_values': [0, 1, 3, 7, 11, 19, 20]},
        'screenid': {'required': True, 'type': str},
        'colspan': {'type': int, 'default': 1},
        'elements': {'type': int, 'default': 25},
        'halign': {'type': int, 'default': 0,
                   'restrict_values': [0, 1, 2]},
        'height': {'type': int, 'default': 200},
        'max_columns': {'type': int, 'default': 3},
        'rowspan': {'type': int, 'default': 1},
        'style': {'type': int, 'default': 0,
                  'restrict_values': [0, 1, 2]},
        'url': {'type': str},
        'valign': {'type': int, 'default': 0,
                   'restrict_values': [0, 1, 2]},
        'width': {'type': int, 'default': 320},
        'x': {'type': int, 'default': 0},
        'y': {'type': int, 'default': 0}}
FLOAT_TREND_OBJECT = {
        'clock': {'type': int},
        'itemid': {'type': str},
        'num': {'type': int},
        'value_min': {'type': float},
        'value_avg': {'type': float},
        'value_max': {'type': float}}
INTEGER_TREND_OBJECT = {
        'clock': {'type': int},
        'itemid': {'type': str},
        'num': {'type': int},
        'value_min': {'type': int},
        'value_avg': {'type': int},
        'value_max': {'type': int}}
TRIGGER_OBJECT = {
        'description': {'required': True, 'type': str},
        'expression': {'required': True, 'type': str},
        'comments': {'type': str},
        'priority': {'type': int,
                     'default': 0, 'restrict_values': list(range(0, 6))},
        'status': {'type': int,
                   'default': 0, 'restrict_values': [0, 1]},
        'type': {'type': int,
                 'default': 0, 'restrict_values': [0, 1]},
        'url': {'type': str},
        'recovery_mode': {'type': int,
                          'default': 0, 'restrict_values': [0, 1, 2]},
        'recovery_expression': {'type': str},
        'correlation_mode': {'type': int,
                             'default': 0, 'restrict_values': [0, 1]},
        'correlation_tag': {'type': str},
        'manual_close': {'type': int,
                         'default': 0, 'restrict_values': [0, 1]},
        'hostid': {'type': str}}
TRIGGER_PROTOTYPE_OBJECT = {
        'description': {'required': True, 'type': str},
        'expression': {'required': True, 'type': str},
        'comments': {'type': str},
        'priority': {'type': int, 'default': 0,
                     'restrict_values': list(range(0, 6))},
        'status': {'type': int, 'default': 0,
                   'restrict_values': [0, 1]},
        'type': {'type': int, 'default': 0,
                 'restrict_values': [0, 1]},
        'url': {'type': str},
        'recovery_mode': {'type': int, 'default': 0,
                          'restrict_values': [0, 1, 2]},
        'recovery_expression': {'type': str},
        'correlation_mode': {'type': int, 'default': 0,
                             'restrict_values': [0, 1]},
        'correlation_tag': {'type': str},
        'manual_close': {'type': int, 'default': 0,
                         'restrict_values': [0, 1]}}
USER_OBJECT = {
        'alias': {'required': True, 'type': str},
        'autologin': {'type': int, 'default': 0,
                      'restrict_values': [0, 1]},
        'autologout': {'type': int, 'default': 900},
        'lang': {'type': str, 'default': 'en_GB'},
        'name': {'type': str},
        'refresh': {'type': int, 'default': 30},
        'rows_per_page': {'type': int, 'default': 50},
        'surname': {'type': str},
        'theme': {'type': str, 'default': 'default',
                  'restrict_values': ['default', 'blue-theme', 'dark-theme']},
        'type': {'type': int, 'default': 1,
                 'restrict_values': [1, 2, 3]},
        'url': {'type': str}}
USER_GROUP_OBJECT = {
        'name': {'required': True, 'type': str},
        'debug_mode': {'type': int, 'default': 0,
                       'restrict_values': [0, 1]},
        'gui_access': {'type': int, 'default': 0,
                       'restrict_values': [0, 1, 2]},
        'user_status': {'type': int, 'default': 0,
                        'restrict_values': [0, 1]}}
PERMISSION_OBJECT = {
        'id': {'required': True, 'type': str},
        'permission': {'required': True, 'type': int, 'restrict_values': [0, 2, 3]}}
GLOBAL_MACRO_OBJECT = {
        'macro': {'required': True, 'type': str},
        'value': {'required': True, 'type': str}}
HOST_MACRO_OBJECT = {
        'hostid': {'required': True, 'type': str},
        'macro': {'required': True, 'type': str},
        'value': {'required': True, 'type': str}}
VALUE_MAPPINGS_OBJECT = {
        'value': {'required': True, 'type': str},
        'newvalue': {'required': True, 'type': str}}
VALUE_MAP_OBJECT = {
        'name': {'required': True, 'type': str},
        'mappings': {'required': True, 'type': list, 'contents': VALUE_MAPPINGS_OBJECT}}
WEB_SCENARIO_OBJECT = {
        'hostid': {'required': True, 'type': str},
        'name': {'required': True, 'type': str},
        'agent': {'type': str, 'default': 'Zabbix'},
        'applicationid': {'type': str},
        'authentication': {'type': int, 'restrict_values': [0, 1, 2], 'default': 0},
        'delay': {'type': int, 'default': 60},
        'headers': {'type': str},
        'http_password': {'type': str},
        'http_proxy': {'type': str},
        'http_user': {'type': str},
        'retries': {'type': int, 'default': 1},
        'ssl_cert_file': {'type': str},
        'ssl_key_file': {'type': str},
        'ssl_key_password': {'type': str},
        'status': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'variables': {'type': str},
        'verify_host': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'verify_peer': {'type': int, 'restrict_values': [0, 1], 'default': 0}}
SCENARIO_STEP_OBJECT = {
        'name': {'required': True, 'type': str},
        # 'no' is not required but implied by the index in the list of steps
        'no': {'required': False, 'type': int},
        'url': {'required': True, 'type': str},
        'follow_redirects': {'type': int, 'restrict_values': [0, 1], 'default': 1},
        'headers': {'type': str},
        'posts': {'type': str},
        'required': {'type': str},
        'retrieve_mode': {'type': int, 'restrict_values': [0, 1], 'default': 0},
        'status_codes': {'type': str},
        'timeout': {'type': int, 'default': 15},
        'variables': {'type': str}}

IDNAMES = {'hostgroup': ['groupid'],
           'graphitem': ['gitemid'],
           'graphprototype': ['graphid'],
           'hostinterface': ['interfaceid'],
           'hostprototype': ['hostid'],
           'itemprototype': ['itemid'],
           'discoveryrule': ['itemid'],
           'map': ['sysmapid'],
           'usermedia': ['mediaid'],
           'problem': ['eventid'],
           'templatescreen': ['screenid'],
           'templatescreenitem': ['screenitemid'],
           'triggerprototype': ['triggerid'],
           'usergroup': ['usrgrpid'],
           'usermacro': ['globalmacroid', 'hostmacroid']}

CRUD_OBJECTS = {
    'action': {'definition': ACTION_OBJECT, 'name': 'name',
               'select': ['selectFilter', 'selectOperations', 'selectRecoveryOperations']},
    'application': {'definition': APPLICATION_OBJECT, 'name': 'name',
                    'select': ['selectHost',
                               'selectItems',
                               'selectDiscoveryRule',
                               'selectApplicationDiscovery']},
    'correlation': {'definition': CORRELATION_OBJECT, 'name': 'name',
                    'select': ['selectFilter', 'selectOperations']},
    'drule': {'definition': DISCOVERY_RULE_OBJECT, 'name': 'name',
              'select': ['selectDChecks', 'selectDHosts']},
    'graph': {'definition': GRAPH_OBJECT, 'name': 'name',
              'select': ['expandName', 'selectGroups', 'selectTemplates',
                         'selectHosts', 'selectItems', 'selectGraphDiscovery',
                         'selectGraphItems', 'selectDiscoveryRule']},
    'graphprototype': {'definition': GRAPH_PROTOTYPE_OBJECT, 'name': 'name',
                       'select': ['selectDiscoveryRule', 'selectGraphItems',
                                  'selectGroups', 'selectHosts', 'selectItems',
                                  'selectTemplates']},
    'host': {'definition': HOST_OBJECT, 'name': 'host',
             'select': ['selectGroups', 'selectApplications', 'selectDiscoveries',
                        'selectDiscoveryRule', 'selectGraphs', 'selectHostDiscovery',
                        'selectHttpTests', 'selectInterfaces', 'selectInventory',
                        'selectItems', 'selectMacros', 'selectParentTemplates',
                        'selectScreens', 'selectTriggers']},
    'hostgroup': {'definition': HOST_GROUP_OBJECT, 'name': 'name',
                  'select': ['selectDiscoveryRule', 'selectGroupDiscovery',
                             'selectHosts', 'selectTemplates']},
    'hostinterface': {'definition': HOST_INTERFACE_OBJECT, 'name': 'dns',  # or 'ip'
                      'select': ['selectItems', 'selectHosts']},
    'hostprototype': {'definition': HOST_PROTOTYPE_OBJECT, 'name': 'host',
                      'select': ['selectDiscoveryRule', 'selectGroupLinks',
                                 'selectGroupPrototypes', 'selectInventory',
                                 'selectParentHost', 'selectTemplates']},
    'iconmap': {'definition': ICON_MAP_OBJECT, 'name': 'name',
                'select': ['selectMappings']},
    'image': {'definition': IMAGE_OBJECT, 'name': 'name',
              'select': ['select_image']},
    'item': {'definition': ITEM_OBJECT, 'name': 'name',
             'select': ['selectHosts', 'selectInterfaces', 'selectTriggers',
                        'selectGraphs', 'selectApplications', 'selectDiscoveryRule',
                        'selectItemDiscovery']},
    'itemprototype': {'definition': ITEM_PROTOTYPE_OBJECT, 'name': 'name',
                      'select': ['selectApplications', 'selectApplicationPrototypes',
                                 'selectDiscoveryRule', 'selectGraphs',
                                 'selectHosts', 'selectTriggers']},
    'service': {'definition': IT_SERVICE_OBJECT, 'name': 'name',
                'select': ['selectParent', 'selectDependencies', 'selectParentDependencies',
                           'selectTimes', 'selectAlarms', 'selectTrigger']},
    'discoveryrule': {'definition': LLD_RULE_OBJECT, 'name': 'name',
                      'select': ['selectFilter', 'selectGraphs', 'selectHostPrototypes',
                                 'selectHosts', 'selectItems', 'selectTriggers']},
    'maintenance': {'definition': MAINTENANCE_OBJECT, 'name': 'name',
                    'select': ['selectGroups', 'selectHosts', 'selectTimeperiods']},
    'map': {'definition': MAP_OBJECT, 'name': 'name',
            'select': ['expandUrls', 'selectIconMap', 'selectLinks', 'selectSelements',
                       'selectUrls', 'selectUsers', 'selectUserGroups']},
    'mediatype': {'definition': MEDIA_TYPE_OBJECT, 'name': 'description',
                  'select': ['selectUser']},
    'proxy': {'definition': PROXY_OBJECT, 'name': 'host',
              'select': ['selectHosts', 'selectInterface']},
    'screen': {'definition': SCREEN_OBJECT, 'name': 'name', 'select': ['selectScreenItems']},
    'screenitem': {'definition': SCREEN_ITEM_OBJECT, 'select': []},
    'script': {'definition': SCRIPT_OBJECT, 'name': 'name',
               'select': ['selectGroups', 'selectHosts']},
    'template': {'definition': TEMPLATE_OBJECT, 'name': 'host',
                 'select': ['selectGroups', 'selectHosts', 'selectTemplates',
                            'selectParentTemplates', 'selectHttpTests',
                            'selectItems', 'selectDiscoveries', 'selectTriggers',
                            'selectGraphs', 'selectApplications', 'selectMacros',
                            'selectScreens']},
    'templatescreen': {'definition': TEMPLATE_SCREEN_OBJECT, 'name': 'name',
                       'select': ['noInheritance', 'selectScreenItems']},
    'trigger': {'definition': TRIGGER_OBJECT, 'name': 'description',
                'select': ['expandComment', 'expandDescription', 'expandExpression',
                           'selectGroups', 'selectHosts', 'selectItems',
                           'selectFunctions', 'selectDependencies',
                           'selectDiscoveryRule', 'selectLastEvent', 'selectTags']},
    'triggerprototype': {'definition': TRIGGER_PROTOTYPE_OBJECT, 'name': 'description',
                         'select': ['expandExpression', 'selectDiscoveryRule',
                                    'selectFunctions', 'selectGroups',
                                    'selectHosts', 'selectItems', 'selectDependencies',
                                    'selectTags']},
    'user': {'definition': USER_OBJECT, 'name': 'alias',
             'select': ['selectMedias', 'selectMediatypes', 'selectUsrgrps']},
    'usergroup': {'definition': USER_GROUP_OBJECT, 'name': 'name',
                  'select': ['selectUsers', 'selectRights']},
    'usermacro': {'definition': HOST_MACRO_OBJECT, 'name': 'macro',
                  'select': ['selectGroups', 'selectHosts', 'selectTemplates']},
    'usermedia': {'definition': MEDIA_OBJECT, 'select': [],
                  'create': 'user.addmedia', 'read': 'usermedia.get',
                  'update': 'user.updatemedia', 'delete': 'user.deletemedia'},
    'valuemap': {'definition': VALUE_MAP_OBJECT, 'name': 'name',
                 'select': ['selectMappings']},
    'httptest': {'definition': WEB_SCENARIO_OBJECT, 'name': 'name',
                 'select': ['expandName', 'expandStepName', 'selectHosts', 'selectSteps']}
}

FUNCTION_KWARGS = {
    'common.get': ['sortfield', 'countOutput', 'editable', 'excludeSearch', 'filter',
                   'limit', 'output', 'preservekeys', 'search', 'searchByAny',
                   'searchWildcardsEnabled', 'sortorder', 'startSearch'],
    'action.create': ACTION_OBJECT.keys() + ['filter', 'operations', 'recovery_operations'],
    'action.delete': [],
    'action.get': ['actionids', 'groupids', 'hostids', 'triggerids', 'mediatypeids',
                   'usergrpids', 'userids', 'scriptids', 'selectFilter', 'selectOperations',
                   'selectRecoveryOperations'],
    # message': 'Invalid params.', 'code': -32602, 'data': 'Cannot update "eventsource" for action X'
    'action.update': ['actionid', 'filter', 'operations', 'recovery_operations'] +
                     list(set(ACTION_OBJECT.keys()) - set(['eventsource'])),
    'alert.get': ['alertids', 'actionids', 'eventids', 'groupids', 'hostids', 'mediatypeids',
                  'objectids', 'userids', 'eventobject', 'eventsource', 'time_from', 'time_till',
                  'selectHosts', 'selectMediatypes', 'selectUsers'],
    'application.create': APPLICATION_OBJECT.keys(),
    'application.delete': [],
    'application.get': ['applicationids', 'groupids', 'hostids', 'inherited', 'itemids',
                        'templated', 'templateids', 'selectHost', 'selectItems',
                        'selectDiscoveryRule', 'selectApplicationDiscovery'],
    'application.massadd': ['applications', 'items'],
    'application.update': ['applicationid'] + APPLICATION_OBJECT.keys(),
    'configuration.export': ['format', 'options'],
    'configuration.import': ['format', 'source', 'rules'],
    'correlation.create': CORRELATION_OBJECT.keys() + ['operations', 'filter'],
    'correlation.delete': [],
    'correlation.get': ['correlationids', 'selectFilter' 'selectOperations'],
    'correlation.update': ['correlationid', 'filter', 'operations'] + CORRELATION_OBJECT.keys(),
    'dhost.get': ['dhostids', 'druleids', 'dserviceids', 'selectDRules', 'selectDServices',
                  'limitSelects'],
    'dservice.get': ['dserviceids', 'dhostids', 'dcheckids', 'druleids', 'selectDRules',
                     'selectDHosts', 'selectHosts', 'limitSelects'],
    'dcheck.get': ['dcheckids', 'druleids', 'dserviceids'],
    'drule.create': DISCOVERY_RULE_OBJECT.keys() + ['dchecks'],
    'drule.delete': [],
    'drule.get': ['dhostids', 'druleids', 'dserviceids', 'selectDChecks', 'selectDHosts',
                  'limitSelects'],
    'drule.update': ['druleid', 'dchecks'] + DISCOVERY_RULE_OBJECT.keys(),
    'event.acknowledge': ['eventids', 'message', 'action'],
    'event.get': ['eventids', 'groupids', 'hostids', 'objectids', 'applicationids',
                  'source', 'object', 'acknowledged', 'severities', 'tags', 'eventid_from',
                  'eventid_till', 'time_from', 'time_till', 'value', 'selectHosts',
                  'selectRelatedObject', 'select_alerts', 'select_acknowledges',
                  'selectTags'],
    'graph.create': GRAPH_OBJECT.keys() + ['gitems'],
    'graph.delete': [],
    'graph.get': ['graphids', 'groupids', 'templateids', 'hostids', 'itemids', 'templated',
                  'inherited', 'expandName', 'selectGroups', 'selectTemplates', 'selectHosts',
                  'selectItems', 'selectGraphDiscovery', 'selectGraphItems', 'selectDiscoveryRule',
                  'filter'],
    'graph.update': ['graphid', 'gitems'] + GRAPH_OBJECT.keys(),
    'graphitem.get': ['gitemids', 'graphids', 'itemids', 'type', 'selectGraphs'],
    'graphprototype.create': GRAPH_PROTOTYPE_OBJECT.keys() + ['gitems'],
    'graphprototype.delete': [],
    'graphprototype.get': ['discoveryids', 'graphids', 'groupids', 'hostids', 'inherited',
                           'itemids', 'templated', 'templateids', 'selectDiscoveryRule',
                           'selectGraphItems', 'selectGroups', 'selectHosts', 'selectItems',
                           'selectTemplates', 'filter'],
    'graphprototype.update': ['graphid', 'gitems'] + GRAPH_PROTOTYPE_OBJECT.keys(),
    'history.get': ['history', 'hostids', 'itemids', 'time_from', 'time_till'],
    'host.create': HOST_OBJECT.keys() + ['groups', 'interfaces', 'templates', 'macros',
                                         'inventory'],
    'host.delete': [],
    'host.get': ['groupids', 'applicationids', 'dserviceids', 'graphids', 'hostids',
                 'httptestids', 'interfaceids', 'itemids', 'maintenanceids', 'monitored_hosts',
                 'proxy_hosts', 'proxyids', 'templated_hosts', 'templateids', 'triggerids',
                 'with_items', 'with_applications', 'with_graphs', 'with_httptests',
                 'with_monitored_httptests', 'with_monitored_items', 'with_simple_graph_items',
                 'with_triggers', 'withInventory', 'selectGroups', 'selectApplications',
                 'selectDiscoveries', 'selectDiscoveryRule', 'selectGraphs', 'selectHostDiscovery',
                 'selectHttpTests', 'selectInterfaces', 'selectInventory', 'selectItems',
                 'selectMacros', 'selectParentTemplates', 'selectScreens', 'selectTriggers',
                 'filter', 'limitSelects', 'search', 'searchInventory'],
    'host.massadd': ['hosts', 'groups', 'interfaces', 'macros', 'templates'],
    'host.massremove': ['hostids', 'groupids', 'interfaces', 'macros', 'templateids',
                        'templateids_clear'],
    'host.massupdate': HOST_OBJECT.keys() + ['hosts', 'groups', 'interfaces', 'inventory',
                                             'inventory_mode', 'macros', 'templates',
                                             'templates_clear'],
    'host.update': ['hostid', 'groups', 'interfaces', 'inventory', 'macros', 'templates',
                    'templates_clear'] + HOST_OBJECT.keys(),
    'hostgroup.create': HOST_GROUP_OBJECT.keys(),
    'hostgroup.delete': [],
    'hostgroup.get': ['graphids', 'groupids', 'hostids', 'maintenanceids', 'monitored_hosts',
                      'real_hosts', 'templated_hosts', 'templateids', 'tiggerids',
                      'with_applications', 'with_graphs', 'with_hosts_and_templates',
                      'with_httptests', 'with_items', 'with_monitored_httptests',
                      'with_monitored_items', 'with_simple_graph_items', 'with_triggers',
                      'selectDiscoveryRule', 'selectGroupDiscovery', 'selectHosts',
                      'selectTemplates', 'limitSelects'],
    'hostgroup.massadd': ['groups', 'hosts', 'templates'],
    'hostgroup.massremove': ['groupids', 'hostids', 'templateids'],
    'hostgroup.massupdate': ['groups', 'hosts', 'templates'],
    'hostgroup.update': ['groupid'] + HOST_GROUP_OBJECT.keys(),
    'hostinterface.create': HOST_INTERFACE_OBJECT.keys(),
    'hostinterface.delete': [],
    'hostinterface.get': ['hostids', 'interfaceids', 'itemids', 'triggerids', 'selectItems',
                          'selectHosts', 'limitSelects'],
    'hostinterface.massadd': ['hosts', 'interfaces'],
    'hostinterface.massremove': ['hostids', 'interfaces'],
    'hostinterface.replacehostinterfaces': ['hostid', 'interfaces'],
    'hostinterface.update': ['interfaceid'] + HOST_INTERFACE_OBJECT.keys(),
    'hostprototype.create': HOST_PROTOTYPE_OBJECT.keys() + ['groupLinks', 'ruleid',
                                                            'groupPrototypes',
                                                            'inventory', 'templates'],
    'hostprototype.delete': [],
    'hostprototype.get': ['hostids', 'discoveryids', 'inherited', 'selectDiscoveryRule',
                          'selectGroupLinks', 'selectGroupPrototypes', 'selectInventory',
                          'selectParentHost', 'selectTemplates'],
    'hostprototype.update': HOST_PROTOTYPE_OBJECT.keys() + ['groupLInks', 'groupPrototypes',
                                                            'inventory', 'templates'],
    'iconmap.create': ICON_MAP_OBJECT.keys() + ['mappings'],
    'iconmap.delete': [],
    'iconmap.get': ['iconmapids', 'sysmapids', 'selectMappings'],
    'iconmap.update': ['iconmapid', 'mappings'] + ICON_MAP_OBJECT.keys(),
    'image.create': IMAGE_OBJECT.keys() + ['image'],
    'image.delete': [],
    'image.get': ['imageids', 'sysmapids', 'select_image'],
    'image.update': ['imageid', 'image'] + IMAGE_OBJECT.keys(),
    'item.create': ITEM_OBJECT.keys() + ['applications'],
    'item.delete': [],
    'item.get': ['itemids', 'groupids', 'templateids', 'hostids', 'proxyids', 'interfaceids',
                 'graphids', 'triggerids', 'applicationids', 'webitems', 'inherited',
                 'templated', 'monitored', 'group', 'host', 'application', 'with_triggers',
                 'selectHosts', 'selectInterfaces', 'selectTriggers', 'selectGraphs',
                 'selectApplications', 'selectDiscoveryRule', 'selectItemDiscovery',
                 'filter', 'limitSelects'],
    'item.update': ['itemid', 'applications'] + ITEM_OBJECT.keys(),
    'itemprototype.create': ITEM_PROTOTYPE_OBJECT.keys() + ['ruleid', 'applications', 'applicationPrototypes'],
    'itemprototype.delete': [],
    'itemprototype.get': ['discoveryids', 'graphids', 'hostids', 'inherited', 'itemids',
                          'monitored', 'templated', 'templateids', 'triggerids',
                          'selectApplications', 'selectApplicationPrototypes',
                          'selectDiscoveryRule', 'selectGraphs', 'selectHosts',
                          'selectTriggers', 'filter', 'limitSelects'],
    'itemprototype.update': ['itemid', 'applications', 'applicationPrototypes'] + ITEM_PROTOTYPE_OBJECT.keys(),
    'service.adddependencies': ['serviceid', 'dependsOnServiceid', 'soft'],
    'service.addtimes': SERVICE_TIME_OBJECT.keys(),
    'service.create': IT_SERVICE_OBJECT.keys() + ['dependencies', 'parentid', 'times'],
    'service.delete': [],
    'service.deletedependencies': [],
    'service.deletetimes': [],
    'service.get': ['serviceids', 'parentids', 'childids', 'selectParent', 'selectDependencies',
                    'selectParentDependencies', 'selectTimes', 'selectAlarms', 'selectTrigger'],
    'service.getsla': ['serviceids', 'intervals'],
    'service.update': ['serviceid', 'dependencies', 'parentid', 'times'] + IT_SERVICE_OBJECT.keys(),
    'discoveryrule.copy': ['discoveryids', 'hostids'],
    'discoveryrule.create': LLD_RULE_OBJECT.keys() + ['filter'],
    'discoveryrule.delete': [],
    'discoveryrule.get': ['itemids', 'hostids', 'inherited', 'interfaceids', 'monitored',
                          'templated', 'templateids', 'selectFilter', 'selectGraphs',
                          'selectHostPrototypes', 'selectHosts', 'selectItems',
                          'selectTriggers', 'filter', 'limitSelects'],
    'discoveryrule.update': ['itemid', 'filter'] + LLD_RULE_OBJECT.keys(),
    'maintenance.create': MAINTENANCE_OBJECT.keys() + ['groupids', 'hostids', 'timeperiods'],
    'maintenance.delete': [],
    'maintenance.get': ['groupids', 'hostids', 'maintenanceids', 'selectGroups',
                        'selectHosts', 'selectTimeperiods'],
    'maintenance.update': ['maintenanceid', 'groupids', 'hostids', 'timeperiods'] + MAINTENANCE_OBJECT.keys(),
    'map.create': MAP_OBJECT.keys() + ['links', 'selements', 'urls', 'users', 'userGroups'],
    'map.delete': [],
    'map.get': ['sysmapids', 'userids', 'expandUrls', 'selectIconMap', 'selectLinks',
                'selectSelements', 'selectUrls', 'selectUsers', 'selectUserGroups'],
    'map.update': ['mapid', 'links', 'selements', 'urls', 'users', 'userGroups'] + MAP_OBJECT.keys(),
    'usermedia.get': ['mediaids', 'usrgrpids', 'userids', 'mediatypeids'],
    'mediatype.create': MEDIA_TYPE_OBJECT.keys(),
    'mediatype.delete': [],
    'mediatype.get': ['mediatypeids', 'mediaids', 'userids', 'selectusers'],
    'mediatype.update': ['mediatypeid'] + MEDIA_TYPE_OBJECT.keys(),
    'problem.get': ['eventids', 'groupids', 'hostids', 'objectids', 'applicationids',
                    'source', 'object', 'acknowledged', 'severities', 'tags', 'recent',
                    'eventid_from', 'eventid_till', 'time_from', 'time_till', 'selectAcknowledges',
                    'selectTags'],
    'proxy.create': PROXY_OBJECT.keys() + ['hosts', 'interface'],
    'proxy.delete': [],
    'proxy.get': ['proxyids', 'selectHosts', 'selectInterface'],
    'proxy.update': ['proxyid', 'hosts', 'interface'] + PROXY_OBJECT.keys(),
    'screen.create': SCREEN_OBJECT.keys() + ['screenitems', 'users', 'userGroups'],
    'screen.delete': [],
    'screen.get': ['screenids', 'userids', 'screenitemids', 'selectUsers', 'selectUserGroups',
                   'selectScreenItems'],
    'screen.update': ['screenid', 'screenitems', 'users', 'userGroups'] + SCREEN_OBJECT.keys(),
    'screenitem.create': SCREEN_ITEM_OBJECT.keys(),
    'screenitem.delete': [],
    'screenitem.get': ['screenitemids', 'screenids'],
    'screenitem.update': ['screenitemid'] + SCREEN_ITEM_OBJECT.keys(),
    'screenitem.updatebyposition': ['x', 'y', 'screenid'] + SCREEN_ITEM_OBJECT.keys(),
    'script.create': SCRIPT_OBJECT.keys(),
    'script.delete': [],
    'script.execute': ['hostid', 'scriptid'],
    'script.get': ['groupids', 'hostids', 'scriptids', 'usrgrpids', 'selectGroups',
                   'selectHosts'],
    'script.getscriptbyhosts': [],
    'script.update': ['scriptid'] + SCRIPT_OBJECT.keys(),
    'template.create': TEMPLATE_OBJECT.keys() + ['groups', 'templates', 'macros', 'hosts'],
    'template.delete': [],
    'template.get': ['templateids', 'groupids', 'parentTemplateids', 'hostids',
                     'graphids', 'itemids', 'triggerids', 'with_items', 'with_triggers',
                     'with_graphs', 'with_httptests', 'selectGroups', 'selectHosts',
                     'selectTemplates', 'selectParentTemplates', 'selectHttpTests',
                     'selectItems', 'selectDiscoveries', 'selectTriggers', 'selectGraphs',
                     'selectApplications', 'selectMacros', 'selectScreens', 'limitSelects'],
    'template.massadd': ['templates', 'groups', 'hosts', 'macros', 'templates_link'],
    'template.massremove': ['templateids', 'groupids', 'hostids', 'macros', 'templateids_clear',
                            'templateids_link'],
    'template.massupdate': TEMPLATE_OBJECT.keys() + ['templates', 'groups', 'hosts',
                                                     'macros', 'templates_clear',
                                                     'templates_link'],
    'template.update': ['templateid', 'groups', 'hosts', 'macros', 'templates',
                        'templates_clear'] + TEMPLATE_OBJECT.keys(),
    'templatescreen.copy': ['screenIds', 'templateIds'],
    'templatescreen.create': TEMPLATE_SCREEN_OBJECT.keys() + ['screenitems'],
    'templatescreen.delete': [],
    'templatescreen.get': ['hostids', 'screenids', 'screenitemids', 'templateids',
                           'noInheritance', 'selectScreenItems'],
    'templatescreen.update': ['screenid', 'screenitems'] + TEMPLATE_SCREEN_OBJECT.keys(),
    'templatescreenitem.get': ['screenids', 'screenitemids', 'hostids'],
    'trend.get': ['itemids', 'time_from', 'time_till', 'countOutput', 'limit', 'output'],
    'trigger.adddependencies': ['triggerid', 'dependsOnTriggerid'],
    'trigger.create': TRIGGER_OBJECT.keys() + ['dependencies', 'tags'],
    'trigger.delete': [],
    'trigger.deletedependencies': [],
    'trigger.get': ['triggerids', 'groupids', 'templateids', 'hostids', 'itemids',
                    'applicationids', 'functions', 'group', 'host', 'inherited',
                    'templated', 'monitored', 'active', 'maintenance', 'withUnacknowledgedEvents',
                    'withAcknowledgedEvents', 'withLastEventUnacknowledged', 'skipDependent',
                    'lastChangeSince', 'lastChangeTill', 'only_true', 'min_severity',
                    'expandComment', 'expandDescription', 'expandExpression', 'selectGroups',
                    'selectHosts', 'selectItems', 'selectFunctions', 'selectDependencies',
                    'selectDiscoveryRule', 'selectLastEvent', 'selectTags', 'filter',
                    'limitSelects'],
    'trigger.update': ['triggerid', 'dependencies', 'tags'] + TRIGGER_OBJECT.keys(),
    'triggerprototype.create': TRIGGER_PROTOTYPE_OBJECT.keys() + ['dependencies', 'tags'],
    'triggerprototype.delete': [],
    'triggerprototype.get': ['active', 'applicationids', 'discoveryids', 'functions',
                             'group', 'groupids', 'host', 'hostids', 'inherited',
                             'maintenance', 'min_severity', 'monitored', 'templated',
                             'templateids', 'triggerids', 'expandExpression', 'selectDiscoveryRule',
                             'selectFunctions', 'selectGroups', 'selectHosts', 'selectItems',
                             'selectDependencies', 'selectTags', 'filter', 'limitSelects'],
    'triggerprototype.update': ['triggerid', 'dependencies', 'tags'] + TRIGGER_PROTOTYPE_OBJECT.keys(),
    'user.addmedia': ['medias', 'users'],
    'user.create': USER_OBJECT.keys() + ['passwd', 'usrgrps', 'user_medias'],
    'user.delete': [],
    'user.deletemedia': [],
    'user.get': ['mediaids', 'mediatypeids', 'userids', 'usrgrpids', 'getAccess',
                 'selectMedias', 'selectMediatypes', 'selectUsrgrps'],
    'user.login': ['password', 'user', 'userData'],
    'user.logout': [],
    'user.update': ['userid', 'passwd', 'usrgrps'] + USER_OBJECT.keys(),
    'user.updatemedia': ['medias', 'users'],
    'user.updateprofile': ['passwd', 'usrgrps'] + USER_OBJECT.keys(),
    'usergroup.create': USER_GROUP_OBJECT.keys() + ['rights', 'userids'],
    'usergroup.delete': [],
    'usergroup.get': ['status', 'userids', 'usrgrpids', 'with_gui_access', 'selectUsers',
                      'selectRights', 'limitSelects'],
    'usergroup.massadd': ['usrgrpids', 'rights', 'userids'],
    'usergroup.massupdate': USER_GROUP_OBJECT.keys() + ['usrgrpids', 'rights', 'userids'],
    'usergroup.update': ['usrgrpid', 'rights', 'userids'] + USER_GROUP_OBJECT.keys(),
    'usermacro.create': HOST_MACRO_OBJECT.keys(),
    'usermacro.createglobal': GLOBAL_MACRO_OBJECT.keys(),
    'usermacro.delete': [],
    'usermacro.deleteglobal': [],
    'usermacro.get': ['globalmacro', 'globalmacroids', 'groupids', 'hostids', 'hostmacroids',
                      'templateids', 'selectGroups', 'selectHosts', 'selectTemplates'],
    'usermacro.update': ['hostmacroid'] + HOST_MACRO_OBJECT.keys(),
    'usermacro.updateglobal': ['globalmacroid'] + GLOBAL_MACRO_OBJECT.keys(),
    'valuemap.create': VALUE_MAP_OBJECT.keys(),
    'valuemap.delete': [],
    'valuemap.get': ['valuemapids', 'selectMappings'],
    'valuemap.update': ['valuemapid'] + VALUE_MAP_OBJECT.keys(),
    'httptest.create': WEB_SCENARIO_OBJECT.keys() + ['steps'],
    'httptest.delete': [],
    'httptest.get': ['applicationids', 'groupids', 'hostids', 'httptestids', 'inherited',
                     'monitored', 'templated', 'templateids', 'expandName', 'expandStepName',
                     'selectHosts', 'selectSteps'],
    'httptest.update': ['httptestid', 'steps'] + WEB_SCENARIO_OBJECT.keys()
}
